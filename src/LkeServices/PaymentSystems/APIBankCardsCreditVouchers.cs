using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Common;
using Common.Log;
using Core.PaymentSystems;
using Core.PaymentSystems.CreditVoucher;
using Core.Settings;
using Newtonsoft.Json;

namespace LkeServices.PaymentSystems
{
    #region Models

    //Api Description: https://www.creditvouchers.com/site/getapi.html


    /// <summary>
    /// Posting to CreditVouechers. 
    /// </summary>
    public class CreditVouchersPostToAggregatorFormModel
    {
        /// <summary>
        /// Reserved for multiple API calls. Use 'Payment' as default action for using checkout.
        /// Required
        /// </summary>
        public string Action { get; set; }

        /// <summary>
        /// Amount of the payment, multiplied by 100.e.g. 1 should be represented with the value 100
        /// Required
        /// </summary>
        public double AmountToPay { get; set; }

        /// <summary>
        /// Currency of the payment. Format:Swift codes(USD) 
        /// Required
        /// </summary>
        public string AmountCurrency { get; set; }

        /// <summary>
        /// Allowed values are 'Sale' and 'Subscription'
        /// Required
        /// </summary>
        public string PaymentType { get; set; }

        /// <summary>
        /// The username as defined in your CreditVouchers api integration menu 
        /// Required
        /// </summary>
        public string API_UserName { get; set; }

        /// Required
        public string MerchantName { get; set; }

        /// <summary>
        /// Your partner email when logging in to CreditVouchers
        /// Required
        /// </summary>
        public string Partner_Email { get; set; }

        /// <summary>
        /// Your internal order id as created in your e-shop.
        /// Required
        /// </summary>
        public string OrderId { get; set; }

        /// <summary>
        /// Customer will be redirected to this URL if payment
        /// was successful
        /// The PaymentOKURL could contain get parameters,
        /// so that the merchant can identify the payment and
        /// track its success
        /// Required
        /// </summary>
        public string PaymentOKURL { get; set; }

        /// <summary>
        /// Customer will be redirected to this URL if payment
        /// was canceled
        /// The PaymentFailURL could contain get parameters,
        /// so that the merchant can identify the payment and
        /// track its failure
        /// Required
        /// </summary>
        public string PaymentFailURL { get; set; }

        /// <summary>
        /// Header for the CheckSum. 
        /// Note: Parameters with empty values should not be
        /// added in the checksum header
        /// 
        /// The header starts with two digits field, indicating the number of the concatenated parameters (the number is right
        /// justified).
        /// Then follow the names of the included request parameters. A comma follows after each parameter name as a separator.
        /// The order of the parameter names indicates the order of the parameter values in the concatenation string.
        /// For each concatenated parameter there is a 3 digits field, indicating the length of its value in the input string (the
        /// number is right justified):
        /// Required
        /// </summary>
        public string CheckSumHeader { get; set; }

        /// <summary>
        /// Md5 hash value, generated by the concatenation of
        /// all parameters followed by the merchant API
        /// password and API Key
        /// Required
        /// </summary>
        public string CheckSum { get; set; }

        /// <summary>
        /// The version of the CreditVouchersAPI you have integrated
        /// Required
        /// </summary>
        public string API_Version { get; set; }


        /// Required
        public string Customer_FirstName { get; set; }


        /// Required
        public string Customer_LastName { get; set; }


        /// Required
        public string Customer_City { get; set; }

        /// Required
        public string Customer_Zip { get; set; }


        /// Required
        public string Customer_Address { get; set; }


        /// Required
        public string Customer_Country { get; set; }

        /// Required
        public string Customer_Email { get; set; }

        /// Required
        public string Customer_MobileNumber { get; set; }

        /// <summary>
        /// Details about the payment. The details are provided
        /// for the customer as information when they visit
        /// CreditVouchers checkout
        /// </summary>
        public string Details { get; set; }

        /// <summary>
        /// Optional URL that will receive notification about the payment success.
        /// </summary>
        public string PaymentNotifyURL { get; set; }

        /// <summary>
        /// Start date for the subscription. If no value given, the
        /// current date will be considered as SubscriptionStart
        /// Accepted format (YYYY-MM-DD)
        /// </summary>
        public string SubscriptionType { get; set; }

        /// <summary>
        /// Start date for the subscription. If no value given, the
        /// current date will be considered as SubscriptionStart
        /// Accepted format (YYYY-MM-DD)
        /// </summary>
        public string SubscriptionStart { get; set; }

        /// <summary>
        /// Expiration date for the subscription.
        /// Accepted format (YYYY-MM-DD)
        /// </summary>
        public string SubscriptionEnd { get; set; }

        /// <summary>
        /// Providing the website secret key, enables the
        /// cobranding feature. Your customers will receive an
        /// email upon successful payment with your website
        /// specific logo, descriptor, support email and phone.
        /// </summary>
        public string WebsiteKey { get; set; }
    }

    public static class CreditVouchersPostToAggregatorFormModelExtensions
    {
        //To avoid using Reflection 
        public static IDictionary<string, string> GetPropertiesDictionary(this CreditVouchersPostToAggregatorFormModel model)
        {
            return new Dictionary<string, string>
            {
                {"Action", model.Action},
                {"AmountToPay", model.AmountToPay.ToString("####")},
                {"AmountCurrency", model.AmountCurrency},
                {"PaymentType", model.PaymentType},
                {"API_UserName", model.API_UserName},
                {"MerchantName", model.MerchantName},
                {"Partner_Email", model.Partner_Email},
                {"OrderId", model.OrderId.ToString()},
                {"PaymentOKURL", model.PaymentOKURL},
                {"PaymentFailURL", model.PaymentFailURL},
                {"CheckSumHeader", model.CheckSumHeader},
                {"CheckSum", model.CheckSum},
                {"API_Version", model.API_Version},
                {"Customer_FirstName", model.Customer_FirstName},
                {"Customer_LastName", model.Customer_LastName},
                {"Customer_City", model.Customer_City},
                {"Customer_Zip", model.Customer_Zip},
                {"Customer_Address", model.Customer_Address},
                {"Customer_Country", model.Customer_Country},
                {"Customer_Email", model.Customer_Email},
                {"Customer_MobileNumber", model.Customer_MobileNumber},
                {"Details", model.Details},
                {"PaymentNotifyURL", model.PaymentNotifyURL},
                {"SubscriptionType", model.SubscriptionType},
                {"SubscriptionStart", model.SubscriptionStart},
                {"SubscriptionEnd", model.SubscriptionEnd},
                {"WebsiteKey", model.WebsiteKey}
            };
        }
    }

    /// <summary>
    /// Class, used to parse responce from Credit Vouchers
    /// </summary>
    public class CreditVouchersPostToAggregatorResponceModel
    {
        /// <summary>
        /// The status code of the authentication
        /// </summary>

        /// Required
        public CreditVoucherResponceStatus Status { get; set; }

        /// <summary>
        /// Describing the error code from above
        /// </summary>

        /// Required
        public string Message { get; set; }

        /// <summary>
        /// Authentication key that can be used for various API calls
        /// </summary>

        /// Required
        public string Auth { get; set; }

        /// <summary>
        /// Token needed for various API calls
        /// </summary>

        /// Required
        public string Token { get; set; }

        /// <summary>
        /// If the authentication passes you will receive this
        /// parameter containing the URL where the customer
        /// should be redirected. You can append this url
        /// with ?mode=iframe to load the iframe version
        /// </summary>
        /// Required
        public string RedirectURL { get; set; }

        /// <summary>
        /// If the authentication failed this parameter is
        /// returned. Contains array of all errors that have
        /// happened during authentication
        /// </summary>
        public IDictionary<string, IEnumerable<string>> Errors { get; set; }
    }

    public enum CreditVoucherResponceStatus
    {
        AuthentificationError = 100,
        Success = 200,
        InternalError = 300
    }

    #endregion

    public class APIBankCardsCreditVouchers:IApiBankCards
    {
        private readonly CreditVouchersSettings _creditVouchersSettings;
        private readonly ICreditVouchersSecurity _creditVouchersSecurity;

        public APIBankCardsCreditVouchers(BaseSettings baseSettings, 
            ILog log, 
            ICreditVouchersSecurity creditVouchersSecurity)
        {
            _creditVouchersSettings = baseSettings.PaymentSystems.CreditVouchers;
            _creditVouchersSecurity = creditVouchersSecurity;
        }

        public async Task<string> GetPaymentUrl(IPaymentTransaction bankCardOrder)
        {

            var creditVoucherOtherInfo = bankCardOrder.Info.DeserializeJson<CreditVoucherOtherPaymentInfo>();

            var postModel = new CreditVouchersPostToAggregatorFormModel
            {
                Action = _creditVouchersSettings.Action,
                AmountToPay = bankCardOrder.Amount * 100, // ref to API documentation
                AmountCurrency =  _creditVouchersSettings.AssetId, //TODO
                PaymentType = _creditVouchersSettings.PaymentType,
                API_UserName = _creditVouchersSettings.ApiUserName,
                Partner_Email = _creditVouchersSettings.ParthnerEmail,
                OrderId = bankCardOrder.Id, 
                PaymentOKURL = string.Format(_creditVouchersSettings.PaymentOkUrlFormat, bankCardOrder.Id), 
                PaymentFailURL = string.Format(_creditVouchersSettings.PaymentFailUrlFormat, bankCardOrder.Id), 
                API_Version = _creditVouchersSettings.ApiVersion,
                Customer_FirstName = creditVoucherOtherInfo.FirstName, 
                Customer_LastName = creditVoucherOtherInfo.LastName,
                Customer_City = creditVoucherOtherInfo.City,
                Customer_Zip = creditVoucherOtherInfo.Zip,
                Customer_Address = creditVoucherOtherInfo.Address,
                Customer_Country = creditVoucherOtherInfo.Country,
                Customer_Email = creditVoucherOtherInfo.Email,
                Customer_MobileNumber = creditVoucherOtherInfo.ContactPhone,
                PaymentNotifyURL = _creditVouchersSettings.PaymentNotifyUrlFormat
            };

            postModel.CheckSumHeader = _creditVouchersSecurity.CalculateHeaderCheckSum(postModel.GetPropertiesDictionary());
            postModel.CheckSum = _creditVouchersSecurity.CalculateCheckSum(postModel.GetPropertiesDictionary(), postModel.CheckSumHeader);
            
            using (var client = new HttpClient())
            {
                var postedValues = postModel.GetPropertiesDictionary().Where(p => !string.IsNullOrEmpty(p.Value)).ToList();
                var resp = await client.PostAsync(_creditVouchersSettings.AggregatorPaymentUrl, new FormUrlEncodedContent(postedValues));

                var respContent = await resp.Content.ReadAsStringAsync();
                
                resp.EnsureSuccessStatusCode();

                var respModel = JsonConvert.DeserializeObject<CreditVouchersPostToAggregatorResponceModel>(respContent);
                if (respModel.Status == CreditVoucherResponceStatus.Success)
                {
                    // mode=iframe is for Mobile version 
                    var result = respModel.RedirectURL +
                        ((respModel.RedirectURL ?? "").Contains("?") ? "&" : "?") +
                        "mode=iframe";

                    return result;
                }

                var logResp = $"Responce from credit voucher api. " +
                              $"Url: {_creditVouchersSettings.AggregatorPaymentUrl} , " +
                              $"ResponceStatusCode: {resp.StatusCode}, " +
                              $"ResponceBody:  {respContent} ";
                var errorsDescriptions = respModel.Errors.Select(p => $"{p.Key}: {string.Join(", ", p.Value)}");

                throw new ArgumentException($"CreditVouchers validation failed:{string.Join("; ", errorsDescriptions)}. Responce: {logResp}") {};
            }
        }
    }
}
